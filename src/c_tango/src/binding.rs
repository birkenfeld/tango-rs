/* automatically generated by rust-bindgen */

pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::libc::c_int,
    pub tz_dsttime: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_timezone {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __timezone_ptr_t = *mut Struct_timezone;
pub type Enum___itimer_which = ::libc::c_uint;
pub const ITIMER_REAL: ::libc::c_uint = 0;
pub const ITIMER_VIRTUAL: ::libc::c_uint = 1;
pub const ITIMER_PROF: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::clone::Clone for Struct_itimerval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __itimer_which_t = ::libc::c_int;
pub type Enum_TangoDataType = ::libc::c_uint;
pub const DEV_VOID: ::libc::c_uint = 0;
pub const DEV_BOOLEAN: ::libc::c_uint = 1;
pub const DEV_SHORT: ::libc::c_uint = 2;
pub const DEV_LONG: ::libc::c_uint = 3;
pub const DEV_FLOAT: ::libc::c_uint = 4;
pub const DEV_DOUBLE: ::libc::c_uint = 5;
pub const DEV_USHORT: ::libc::c_uint = 6;
pub const DEV_ULONG: ::libc::c_uint = 7;
pub const DEV_STRING: ::libc::c_uint = 8;
pub const DEVVAR_CHARARRAY: ::libc::c_uint = 9;
pub const DEVVAR_SHORTARRAY: ::libc::c_uint = 10;
pub const DEVVAR_LONGARRAY: ::libc::c_uint = 11;
pub const DEVVAR_FLOATARRAY: ::libc::c_uint = 12;
pub const DEVVAR_DOUBLEARRAY: ::libc::c_uint = 13;
pub const DEVVAR_USHORTARRAY: ::libc::c_uint = 14;
pub const DEVVAR_ULONGARRAY: ::libc::c_uint = 15;
pub const DEVVAR_STRINGARRAY: ::libc::c_uint = 16;
pub const DEVVAR_LONGSTRINGARRAY: ::libc::c_uint = 17;
pub const DEVVAR_DOUBLESTRINGARRAY: ::libc::c_uint = 18;
pub const DEV_STATE: ::libc::c_uint = 19;
pub const CONST_DEV_STRING: ::libc::c_uint = 20;
pub const DEVVAR_BOOLEANARRAY: ::libc::c_uint = 21;
pub const DEV_UCHAR: ::libc::c_uint = 22;
pub const DEV_LONG64: ::libc::c_uint = 23;
pub const DEV_ULONG64: ::libc::c_uint = 24;
pub const DEVVAR_LONG64ARRAY: ::libc::c_uint = 25;
pub const DEVVAR_ULONG64ARRAY: ::libc::c_uint = 26;
pub const DEV_INT: ::libc::c_uint = 27;
pub const DEV_ENCODED: ::libc::c_uint = 28;
pub type Enum_TangoDevState = ::libc::c_uint;
pub const ON: ::libc::c_uint = 0;
pub const OFF: ::libc::c_uint = 1;
pub const CLOSE: ::libc::c_uint = 2;
pub const OPEN: ::libc::c_uint = 3;
pub const INSERT: ::libc::c_uint = 4;
pub const EXTRACT: ::libc::c_uint = 5;
pub const MOVING: ::libc::c_uint = 6;
pub const STANDBY: ::libc::c_uint = 7;
pub const FAULT: ::libc::c_uint = 8;
pub const INIT: ::libc::c_uint = 9;
pub const RUNNING: ::libc::c_uint = 10;
pub const ALARM: ::libc::c_uint = 11;
pub const DISABLE: ::libc::c_uint = 12;
pub const UNKNOWN: ::libc::c_uint = 13;
pub type Enum_AttrQuality = ::libc::c_uint;
pub const ATTR_VALID: ::libc::c_uint = 0;
pub const ATTR_INVALID: ::libc::c_uint = 1;
pub const ATTR_ALARM: ::libc::c_uint = 2;
pub const ATTR_CHANGING: ::libc::c_uint = 3;
pub const ATTR_WARNING: ::libc::c_uint = 4;
pub type Enum_AttrWriteType = ::libc::c_uint;
pub const READ: ::libc::c_uint = 0;
pub const READ_WITH_WRITE: ::libc::c_uint = 1;
pub const WRITE: ::libc::c_uint = 2;
pub const READ_WRITE: ::libc::c_uint = 3;
pub type Enum_AttrDataFormat = ::libc::c_uint;
pub const SCALAR: ::libc::c_uint = 0;
pub const SPECTRUM: ::libc::c_uint = 1;
pub const IMAGE: ::libc::c_uint = 2;
pub type Enum_DispLevel = ::libc::c_uint;
pub const OPERATOR: ::libc::c_uint = 0;
pub const EXPERT: ::libc::c_uint = 1;
pub type Enum_ErrSeverity = ::libc::c_uint;
pub const WARN: ::libc::c_uint = 0;
pub const ERR: ::libc::c_uint = 1;
pub const PANIC: ::libc::c_uint = 2;
pub type Enum_DevSource = ::libc::c_uint;
pub const DEV: ::libc::c_uint = 0;
pub const CACHE: ::libc::c_uint = 1;
pub const CACHE_DEV: ::libc::c_uint = 2;
pub type TangoDevState = Enum_TangoDevState;
pub type TangoDataType = Enum_TangoDataType;
pub type AttrQuality = Enum_AttrQuality;
pub type AttrWriteType = Enum_AttrWriteType;
pub type AttrDataFormat = Enum_AttrDataFormat;
pub type DispLevel = Enum_DispLevel;
pub type ErrSeverity = Enum_ErrSeverity;
pub type DevSource = Enum_DevSource;
pub type TangoDevLong = ::libc::c_int;
pub type TangoDevULong = ::libc::c_uint;
pub type TangoDevLong64 = ::libc::c_long;
pub type TangoDevULong64 = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_TangoDevEncoded {
    pub encoded_format: *mut ::libc::c_char,
    pub encoded_length: ::libc::c_uint,
    pub encoded_data: *mut ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_TangoDevEncoded {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_TangoDevEncoded {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TangoDevEncoded = Struct_TangoDevEncoded;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarBoolArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut u8,
}
impl ::std::clone::Clone for Struct_VarBoolArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarBoolArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarBoolArray = Struct_VarBoolArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarCharArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_VarCharArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarCharArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarCharArray = Struct_VarCharArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarShortArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut ::libc::c_short,
}
impl ::std::clone::Clone for Struct_VarShortArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarShortArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarShortArray = Struct_VarShortArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarUShortArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct_VarUShortArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarUShortArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarUShortArray = Struct_VarUShortArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarLongArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut TangoDevLong,
}
impl ::std::clone::Clone for Struct_VarLongArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarLongArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarLongArray = Struct_VarLongArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarULongArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut TangoDevULong,
}
impl ::std::clone::Clone for Struct_VarULongArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarULongArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarULongArray = Struct_VarULongArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarLong64Array {
    pub length: ::libc::c_uint,
    pub sequence: *mut TangoDevLong64,
}
impl ::std::clone::Clone for Struct_VarLong64Array {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarLong64Array {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarLong64Array = Struct_VarLong64Array;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarULong64Array {
    pub length: ::libc::c_uint,
    pub sequence: *mut TangoDevULong64,
}
impl ::std::clone::Clone for Struct_VarULong64Array {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarULong64Array {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarULong64Array = Struct_VarULong64Array;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarFloatArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut ::libc::c_float,
}
impl ::std::clone::Clone for Struct_VarFloatArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarFloatArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarFloatArray = Struct_VarFloatArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarDoubleArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut ::libc::c_double,
}
impl ::std::clone::Clone for Struct_VarDoubleArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarDoubleArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarDoubleArray = Struct_VarDoubleArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarStringArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_VarStringArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarStringArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarStringArray = Struct_VarStringArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarStateArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut TangoDevState,
}
impl ::std::clone::Clone for Struct_VarStateArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarStateArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarStateArray = Struct_VarStateArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarEncodedArray {
    pub length: ::libc::c_uint,
    pub sequence: *mut TangoDevEncoded,
}
impl ::std::clone::Clone for Struct_VarEncodedArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarEncodedArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarEncodedArray = Struct_VarEncodedArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarLongStringArray {
    pub long_length: ::libc::c_uint,
    pub long_sequence: *mut TangoDevLong,
    pub string_length: ::libc::c_uint,
    pub string_sequence: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_VarLongStringArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarLongStringArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarLongStringArray = Struct_VarLongStringArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VarDoubleStringArray {
    pub double_length: ::libc::c_uint,
    pub double_sequence: *mut ::libc::c_double,
    pub string_length: ::libc::c_uint,
    pub string_sequence: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_VarDoubleStringArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VarDoubleStringArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VarDoubleStringArray = Struct_VarDoubleStringArray;
#[repr(C)]
#[derive(Copy)]
pub struct Union_TangoAttributeData {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_TangoAttributeData {
    pub unsafe fn bool_arr(&mut self) -> *mut VarBoolArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn char_arr(&mut self) -> *mut VarCharArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn short_arr(&mut self) -> *mut VarShortArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ushort_arr(&mut self) -> *mut VarUShortArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long_arr(&mut self) -> *mut VarLongArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong_arr(&mut self) -> *mut VarULongArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long64_arr(&mut self) -> *mut VarLong64Array {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong64_arr(&mut self) -> *mut VarULong64Array {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn float_arr(&mut self) -> *mut VarFloatArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn double_arr(&mut self) -> *mut VarDoubleArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string_arr(&mut self) -> *mut VarStringArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn state_arr(&mut self) -> *mut VarStateArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn encoded_arr(&mut self) -> *mut VarEncodedArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_TangoAttributeData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_TangoAttributeData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TangoAttributeData = Union_TangoAttributeData;
#[repr(C)]
#[derive(Copy)]
pub struct Union_TangoCommandData {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_TangoCommandData {
    pub unsafe fn bool_val(&mut self) -> *mut u8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn short_val(&mut self) -> *mut ::libc::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ushort_val(&mut self) -> *mut ::libc::c_ushort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long_val(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong_val(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn float_val(&mut self) -> *mut ::libc::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn double_val(&mut self) -> *mut ::libc::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string_val(&mut self) -> *mut *mut ::libc::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn state_val(&mut self) -> *mut TangoDevState {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long64_val(&mut self) -> *mut TangoDevLong64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong64_val(&mut self) -> *mut TangoDevULong64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bool_arr(&mut self) -> *mut VarBoolArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn char_arr(&mut self) -> *mut VarCharArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn short_arr(&mut self) -> *mut VarShortArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ushort_arr(&mut self) -> *mut VarUShortArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long_arr(&mut self) -> *mut VarLongArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong_arr(&mut self) -> *mut VarULongArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long64_arr(&mut self) -> *mut VarLong64Array {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong64_arr(&mut self) -> *mut VarULong64Array {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn float_arr(&mut self) -> *mut VarFloatArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn double_arr(&mut self) -> *mut VarDoubleArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string_arr(&mut self) -> *mut VarStringArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn state_arr(&mut self) -> *mut VarStateArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn encoded_val(&mut self) -> *mut TangoDevEncoded {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long_string_arr(&mut self) -> *mut VarLongStringArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn double_string_arr(&mut self) -> *mut VarDoubleStringArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_TangoCommandData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_TangoCommandData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TangoCommandData = Union_TangoCommandData;
#[repr(C)]
#[derive(Copy)]
pub struct Union_TangoPropertyData {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_TangoPropertyData {
    pub unsafe fn bool_val(&mut self) -> *mut u8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn char_val(&mut self) -> *mut ::libc::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn short_val(&mut self) -> *mut ::libc::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ushort_val(&mut self) -> *mut ::libc::c_ushort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long_val(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong_val(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn float_val(&mut self) -> *mut ::libc::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn double_val(&mut self) -> *mut ::libc::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string_val(&mut self) -> *mut *mut ::libc::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long64_val(&mut self) -> *mut TangoDevLong64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong64_val(&mut self) -> *mut TangoDevULong64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn short_arr(&mut self) -> *mut VarShortArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ushort_arr(&mut self) -> *mut VarUShortArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long_arr(&mut self) -> *mut VarLongArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong_arr(&mut self) -> *mut VarULongArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long64_arr(&mut self) -> *mut VarLong64Array {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong64_arr(&mut self) -> *mut VarULong64Array {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn float_arr(&mut self) -> *mut VarFloatArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn double_arr(&mut self) -> *mut VarDoubleArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string_arr(&mut self) -> *mut VarStringArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_TangoPropertyData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_TangoPropertyData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TangoPropertyData = Union_TangoPropertyData;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CommandData {
    pub arg_type: TangoDataType,
    pub cmd_data: TangoCommandData,
}
impl ::std::clone::Clone for Struct_CommandData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CommandData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CommandData = Struct_CommandData;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AttributeData {
    pub data_type: TangoDataType,
    pub attr_data: TangoAttributeData,
    pub data_format: AttrDataFormat,
    pub quality: AttrQuality,
    pub name: *mut ::libc::c_char,
    pub dim_x: ::libc::c_int,
    pub dim_y: ::libc::c_int,
    pub time_stamp: Struct_timeval,
}
impl ::std::clone::Clone for Struct_AttributeData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AttributeData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AttributeData = Struct_AttributeData;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AttributeDataList {
    pub length: ::libc::c_uint,
    pub sequence: *mut AttributeData,
}
impl ::std::clone::Clone for Struct_AttributeDataList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AttributeDataList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AttributeDataList = Struct_AttributeDataList;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_DevFailed {
    pub desc: *mut ::libc::c_char,
    pub reason: *mut ::libc::c_char,
    pub origin: *mut ::libc::c_char,
    pub severity: ErrSeverity,
}
impl ::std::clone::Clone for Struct_DevFailed {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_DevFailed {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DevFailed = Struct_DevFailed;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ErrorStack {
    pub length: ::libc::c_uint,
    pub sequence: *mut DevFailed,
}
impl ::std::clone::Clone for Struct_ErrorStack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ErrorStack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ErrorStack = Struct_ErrorStack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CommandInfo {
    pub cmd_name: *mut ::libc::c_char,
    pub cmd_tag: ::libc::c_int,
    pub in_type: ::libc::c_int,
    pub out_type: ::libc::c_int,
    pub in_type_desc: *mut ::libc::c_char,
    pub out_type_desc: *mut ::libc::c_char,
    pub disp_level: DispLevel,
}
impl ::std::clone::Clone for Struct_CommandInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CommandInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CommandInfo = Struct_CommandInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CommandInfoList {
    pub length: ::libc::c_uint,
    pub sequence: *mut CommandInfo,
}
impl ::std::clone::Clone for Struct_CommandInfoList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_CommandInfoList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CommandInfoList = Struct_CommandInfoList;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AttributeInfo {
    pub name: *mut ::libc::c_char,
    pub writable: AttrWriteType,
    pub data_format: AttrDataFormat,
    pub data_type: TangoDataType,
    pub max_dim_x: ::libc::c_int,
    pub max_dim_y: ::libc::c_int,
    pub description: *mut ::libc::c_char,
    pub label: *mut ::libc::c_char,
    pub unit: *mut ::libc::c_char,
    pub standard_unit: *mut ::libc::c_char,
    pub display_unit: *mut ::libc::c_char,
    pub format: *mut ::libc::c_char,
    pub min_value: *mut ::libc::c_char,
    pub max_value: *mut ::libc::c_char,
    pub min_alarm: *mut ::libc::c_char,
    pub max_alarm: *mut ::libc::c_char,
    pub writable_attr_name: *mut ::libc::c_char,
    pub disp_level: DispLevel,
}
impl ::std::clone::Clone for Struct_AttributeInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AttributeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AttributeInfo = Struct_AttributeInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AttributeInfoList {
    pub length: ::libc::c_uint,
    pub sequence: *mut AttributeInfo,
}
impl ::std::clone::Clone for Struct_AttributeInfoList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_AttributeInfoList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AttributeInfoList = Struct_AttributeInfoList;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_DbDatum {
    pub property_name: *mut ::libc::c_char,
    pub data_type: TangoDataType,
    pub prop_data: TangoPropertyData,
    pub is_empty: u8,
    pub wrong_data_type: u8,
}
impl ::std::clone::Clone for Struct_DbDatum {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_DbDatum {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DbDatum = Struct_DbDatum;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_DbData {
    pub length: ::libc::c_uint,
    pub sequence: *mut DbDatum,
}
impl ::std::clone::Clone for Struct_DbData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_DbData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DbData = Struct_DbData;
#[link(name = "c_tango")]
#[link(name = "tango")]
#[link(name = "omniORB4")]
#[link(name = "omniDynamic4")]
#[link(name = "omnithread")]
extern "C" {
    pub static mut TangoDataTypeName: *const *const ::libc::c_char;
    pub static mut TangoDevStateName: *const *const ::libc::c_char;
}
#[link(name = "c_tango")]
#[link(name = "tango")]
#[link(name = "omniORB4")]
#[link(name = "omniDynamic4")]
#[link(name = "omnithread")]
extern "C" {
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gettimeofday(__tv: *mut Struct_timeval, __tz: __timezone_ptr_t)
     -> ::libc::c_int;
    pub fn settimeofday(__tv: *const Struct_timeval,
                        __tz: *const Struct_timezone) -> ::libc::c_int;
    pub fn adjtime(__delta: *const Struct_timeval,
                   __olddelta: *mut Struct_timeval) -> ::libc::c_int;
    pub fn getitimer(__which: __itimer_which_t,
                     __value: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn setitimer(__which: __itimer_which_t,
                     __new: *const Struct_itimerval,
                     __old: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn utimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn lutimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn futimes(__fd: ::libc::c_int, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn tango_create_device_proxy(dev_name: *mut ::libc::c_char,
                                     proxy: *mut *mut ::libc::c_void,
                                     error: *mut ErrorStack) -> u8;
    pub fn tango_delete_device_proxy(proxy: *mut *mut ::libc::c_void,
                                     error: *mut ErrorStack) -> u8;
    pub fn tango_set_timeout_millis(proxy: *mut ::libc::c_void,
                                    millis: ::libc::c_int,
                                    error: *mut ErrorStack) -> u8;
    pub fn tango_get_timeout_millis(proxy: *mut ::libc::c_void,
                                    millis: *mut ::libc::c_int,
                                    error: *mut ErrorStack) -> u8;
    pub fn tango_set_source(proxy: *mut ::libc::c_void, source: DevSource,
                            error: *mut ErrorStack) -> u8;
    pub fn tango_get_source(proxy: *mut ::libc::c_void,
                            source: *mut DevSource, error: *mut ErrorStack)
     -> u8;
    pub fn tango_lock(proxy: *mut ::libc::c_void, error: *mut ErrorStack)
     -> u8;
    pub fn tango_unlock(proxy: *mut ::libc::c_void, error: *mut ErrorStack)
     -> u8;
    pub fn tango_is_locked(proxy: *mut ::libc::c_void, is_locked: *mut u8,
                           error: *mut ErrorStack) -> u8;
    pub fn tango_is_locked_by_me(proxy: *mut ::libc::c_void,
                                 is_locked_by_me: *mut u8,
                                 error: *mut ErrorStack) -> u8;
    pub fn tango_locking_status(proxy: *mut ::libc::c_void,
                                lock_status: *mut *mut ::libc::c_char,
                                error: *mut ErrorStack) -> u8;
    pub fn tango_command_query(proxy: *mut ::libc::c_void,
                               cmd_name: *mut ::libc::c_char,
                               cmd_info: *mut CommandInfo,
                               error: *mut ErrorStack) -> u8;
    pub fn tango_command_list_query(proxy: *mut ::libc::c_void,
                                    cmd_info_list: *mut CommandInfoList,
                                    error: *mut ErrorStack) -> u8;
    pub fn tango_command_inout(proxy: *mut ::libc::c_void,
                               cmd_name: *mut ::libc::c_char,
                               argin: *mut CommandData,
                               argout: *mut CommandData,
                               error: *mut ErrorStack) -> u8;
    pub fn tango_free_CommandData(command_data: *mut CommandData) -> ();
    pub fn tango_free_CommandInfo(command_info: *mut CommandInfo) -> ();
    pub fn tango_free_CommandInfoList(command_info_list: *mut CommandInfoList)
     -> ();
    pub fn tango_get_attribute_list(proxy: *mut ::libc::c_void,
                                    attr_names: *mut VarStringArray,
                                    error: *mut ErrorStack) -> u8;
    pub fn tango_get_attribute_config(proxy: *mut ::libc::c_void,
                                      attr_names: *mut VarStringArray,
                                      attr_info_list: *mut AttributeInfoList,
                                      error: *mut ErrorStack) -> u8;
    pub fn tango_attribute_list_query(proxy: *mut ::libc::c_void,
                                      attr_info_list: *mut AttributeInfoList,
                                      error: *mut ErrorStack) -> u8;
    pub fn tango_read_attribute(proxy: *mut ::libc::c_void,
                                attr_name: *mut ::libc::c_char,
                                argout: *mut AttributeData,
                                error: *mut ErrorStack) -> u8;
    pub fn tango_write_attribute(proxy: *mut ::libc::c_void,
                                 argin: *mut AttributeData,
                                 error: *mut ErrorStack) -> u8;
    pub fn tango_read_attributes(proxy: *mut ::libc::c_void,
                                 attr_names: *mut VarStringArray,
                                 argout: *mut AttributeDataList,
                                 error: *mut ErrorStack) -> u8;
    pub fn tango_write_attributes(proxy: *mut ::libc::c_void,
                                  argin: *mut AttributeDataList,
                                  error: *mut ErrorStack) -> u8;
    pub fn tango_free_AttributeData(attribute_data: *mut AttributeData) -> ();
    pub fn tango_free_AttributeDataList(attribute_data_list:
                                            *mut AttributeDataList) -> ();
    pub fn tango_free_VarStringArray(string_arr: *mut VarStringArray) -> ();
    pub fn tango_free_AttributeInfoList(attribute_info_list:
                                            *mut AttributeInfoList) -> ();
    pub fn tango_print_ErrorStack(error_stack: *mut ErrorStack) -> ();
    pub fn tango_free_ErrorStack(error_stack: *mut ErrorStack) -> ();
    pub fn tango_create_database_proxy(db_proxy: *mut *mut ::libc::c_void,
                                       error: *mut ErrorStack) -> u8;
    pub fn tango_delete_database_proxy(db_proxy: *mut *mut ::libc::c_void,
                                       error: *mut ErrorStack) -> u8;
    pub fn tango_get_device_exported(db_proxy: *mut ::libc::c_void,
                                     name_filter: *mut ::libc::c_char,
                                     dev_list: *mut DbDatum,
                                     error: *mut ErrorStack) -> u8;
    pub fn tango_get_device_exported_for_class(db_proxy: *mut ::libc::c_void,
                                               class_name:
                                                   *mut ::libc::c_char,
                                               dev_list: *mut DbDatum,
                                               error: *mut ErrorStack) -> u8;
    pub fn tango_get_object_list(db_proxy: *mut ::libc::c_void,
                                 name_filter: *mut ::libc::c_char,
                                 obj_list: *mut DbDatum,
                                 error: *mut ErrorStack) -> u8;
    pub fn tango_get_object_property_list(db_proxy: *mut ::libc::c_void,
                                          obj_name: *mut ::libc::c_char,
                                          name_filter: *mut ::libc::c_char,
                                          prop_list: *mut DbDatum,
                                          error: *mut ErrorStack) -> u8;
    pub fn tango_get_property(db_proxy: *mut ::libc::c_void,
                              obj_name: *mut ::libc::c_char,
                              prop_list: *mut DbData, error: *mut ErrorStack)
     -> u8;
    pub fn tango_put_property(db_proxy: *mut ::libc::c_void,
                              obj_name: *mut ::libc::c_char,
                              prop_list: *mut DbData, error: *mut ErrorStack)
     -> u8;
    pub fn tango_delete_property(db_proxy: *mut ::libc::c_void,
                                 obj_name: *mut ::libc::c_char,
                                 prop_list: *mut DbData,
                                 error: *mut ErrorStack) -> u8;
    pub fn tango_get_device_property(dev_proxy: *mut ::libc::c_void,
                                     prop_list: *mut DbData,
                                     error: *mut ErrorStack) -> u8;
    pub fn tango_put_device_property(dev_proxy: *mut ::libc::c_void,
                                     prop_list: *mut DbData,
                                     error: *mut ErrorStack) -> u8;
    pub fn tango_delete_device_property(dev_proxy: *mut ::libc::c_void,
                                        prop_list: *mut DbData,
                                        error: *mut ErrorStack) -> u8;
    pub fn tango_free_DbDatum(db_datum: *mut DbDatum) -> ();
    pub fn tango_free_DbData(db_data: *mut DbData) -> ();
}
